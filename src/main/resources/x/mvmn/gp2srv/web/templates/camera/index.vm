#parse("camera/head.vm")
<script>
	function nav(elem) {
		$(".sitesection").hide();
		$("#section_"+elem).show();
	}
	
	function restartLiveView() {
		$("#liveViewContainer img").each(function (idx, el) {
			el.src='$!{request.contextPath}/stream.mjpeg?t=' + Date.now();
		});
	}
	
	function doPreview() {
		$("#liveViewContainer").html('<img class="fullWidth" style="width: 100%" src="$!{request.contextPath}/preview.jpeg?t=' + Date.now() + '" />');
		$("#liveViewContainer").show();
	}
	
	function reReadConfig() {
		getJson("$!{request.contextPath}/cameraConfig.json?reRead=true", function(config) {
			console.log(config);
			getJson("$!{request.contextPath}/favedConfigs.json?", function(favedConfigs) {
				console.log(favedConfigs);
				$("#section_camera").html('');

				var entries = [];
				for(var confPath in config) {
					var confEntry = config[confPath];
					
					entries.push({confEntry: confEntry, faved: favedConfigs[confEntry.path], favInProgress: false, favError: false});
				}
				var ractive = new Ractive({
					el: '#section_camera',
					template: '#tplCameraConfigSettings',
					data: {entries: entries, showFavToggle: true, contextPath:"$!{request.contextPath}"}
				});
				ractive.on({
					doCaptureDldDel: function(event) {
						var captureButton = event.node;
						captureButton.disabled = true;
						$.ajax({
							url: '$!{request.contextPath}/capture_dld_del',
							method: 'POST'
						}).fail(function(jqXHR, textStatus) {
							captureButton.disabled = false;
							console.log(jqXHR);
							alert("Error occurred: "+textStatus);
							restartLiveView();
						}).done(function() {
							captureButton.disabled = false;
							restartLiveView();
						});
					},				
					doCapture: function(event) {
						var captureButton = event.node;
						captureButton.disabled = true;
						$.ajax({
							url: '$!{request.contextPath}/capture',
							method: 'POST'
						}).fail(function(jqXHR, textStatus) {
							captureButton.disabled = false;
							console.log(jqXHR);
							alert("Error occurred: "+textStatus);
							restartLiveView();
						}).done(function() {
							captureButton.disabled = false;
							restartLiveView();
						});
					},
					toggleLiveView: function(event) {
						$(event.node).parent().find("input").click();
					},
					setLiveView: function(event) {
						if(event.node.checked) {
							$("#liveViewContainer").show();
							$("#liveViewContainer").html('<img class="fullWidth" style="width: 100%" src="$!{request.contextPath}/stream.mjpeg?t=' + Date.now() + '" />');
						} else {
							$("#liveViewContainer").hide();
							$("#liveViewContainer img").attr("src", "");
						}
					},
					doPreview: doPreview,
					refreshConfig: function(event) {
						reReadConfig();
					},
					handleShowFavOnly: function(event, value) {
						var boolVal = !!value; 
						ractive.set('showOnlyFaved', boolVal);
						ractive.set('showFavToggle', !boolVal); 
					},
					handleChange: function(event, entryIndex, val) {
						var ractive = this;
						var allEntries = this.get("entries");
						var entry = allEntries[entryIndex];
						var confEntry = entry.confEntry;
						if(confEntry.type.toString().toLowerCase() == "toggle" && (val === 0 || val) && val == confEntry.intValue) {
							val = 2;
						}
						if(val === undefined) {
							if(confEntry.intValue === 0) {
								val = 0;
							} else {
								val = confEntry.intValue || confEntry.strValue || confEntry.floatValue;
							}
						}
						if(confEntry.valueType == "INT") {
							confEntry.intValue = val;
						} else if(confEntry.valueType == "FLOAT") {
							confEntry.floatValue = val;
						} else if(confEntry.valueType == "STRING") {
							confEntry.strValue = val;
						}
						var url = "$!{request.contextPath}/allsettingset";
						entry.setError = false;
						entry.setInProgress = true;
						ractive.update("entries");
						
						$.ajax({
							method: "POST",
							cache: false,
							url: url,
							data: {
								type: confEntry.type,
								key: confEntry.path,
								value: val
							}
						}).fail(function(jqXHR, textStatus) {
							entry.setInProgress = false;
							entry.setError = true;
							console.log("Error " + jqXHR.status + " on setting faved status for camera config entry: " + jqXHR.statusText);
							ractive.update("entries");
							restartLiveView();
						}).done(function(data) {
							entry.setInProgress = false;
							allEntries[entryIndex].confEntry = data;
							ractive.update("entries");
							restartLiveView();
						});							
					},
					handleFav: function(event, entryIndex) {
						var ractive = this;
						var entry = this.get("entries")[entryIndex];
						var favPath = entry.confEntry.path;
						var favVal = event.node.checked ? "true":"false";
						var url = "$!{request.contextPath}/favsetting?key=" + encodeURIComponent(favPath)
								+ "&value=" + encodeURIComponent(favVal);
						entry.favError = false;
						entry.favInProgress = true;
						ractive.update("entries");
						$.ajax({
							method: "POST",
							cache: false,
							url: url
						}).fail(function(jqXHR, textStatus) {
							entry.favInProgress = false;
							entry.favError = true;
							console.log("Error " + jqXHR.status + " on setting faved status for camera config entry: " + jqXHR.statusText);
							ractive.update("entries");
						}).done(function(data) {
							entry.favInProgress = false;
							entry.faved = (data===true);
							ractive.update("entries");
						});
					}
				});
			}, function(textStatus) { alert('Error loading faved config elements: '+textStatus) });
		}, function(textStatus) { alert('Error loading config: '+textStatus) });
	}
	
	function initUi() {
		var helpers = Ractive.defaults.data;
		Ractive.partials.tplConfigSetting = Ractive.parse($('#tplConfigSetting').text());
		helpers.lowercase = function(str) { return str? str.toLowerCase() : str };
		helpers.uppercase = function(str) { return str? str.toUpperCase() : str };
	
		$(".sitesection").hide();
		reReadConfig();
		
		var navRactive = new Ractive({
			el: '#section_files',
			template: '#tplBrowseSection',
			data: {contextPath:"$!{request.contextPath}", browseData:{"currentBrowsePath":"", "filesList":[], "folderList":[{name:"/", path:"", folder:true}]}, pathElements:[]}
		});
		$("#browseErrorIndicator").hide();
		$("#browseLoadingIndicator").hide();
		navRactive.on({
			browseFolder: function(event, browsePath) {
				$("#browseLoadingIndicator").show();
				getJson("$!{request.contextPath}/browse.json?path=" + encodeURIComponent(browsePath), function(browseData) {
					$("#browseLoadingIndicator").hide();
					$("#browseErrorIndicator").hide();
					navRactive.set("pathElements", browseData.currentBrowsePath.replace(/\/$/g,'').split("/"));
					navRactive.set("browseData", browseData);
					navRactive.set("selectedFiles", []);
					$("#browseContent .fileSelectionCheckbox").prop("checked", false);
				}, function(textStatus) {
					console.log('Error loading files list: '+textStatus);
					$("#browseLoadingIndicator").hide();
					$("#browseErrorIndicator").show();
				});
			},
			setFileSelection: function(event, fileIndex) {
				var selectedFiles = navRactive.get("selectedFiles");
				if(!selectedFiles)  {
					selectedFiles = [];
				}
				if(event.node.checked) {
					selectedFiles.push(fileIndex);
				} else {
					var index = selectedFiles.indexOf(fileIndex);
					if(index>=0) {
						selectedFiles.splice(index, 1);
					}
				}
				navRactive.set("selectedFiles", selectedFiles);
			},
			deselectAllFiles: function(event) {
				navRactive.set("selectedFiles", []);
			},
			selectAllFiles: function(event) {
				var selectedFiles = [];
				for(var i=0; i<navRactive.get("browseData").filesList.length; i++) {
					selectedFiles.push(i);
				}
				navRactive.set("selectedFiles", selectedFiles);
			},
			loadThumbnails: function(event) {
				var browseData = navRactive.get("browseData");
				var selectedFiles = navRactive.get("selectedFiles");
				if(!selectedFiles) {
					selectedFiles = [];
				}
				for(var i in selectedFiles) {
					var selectedFileIndex = selectedFiles[i];
					var selectedFile = browseData.filesList[selectedFileIndex];
					selectedFile.previewLink = navRactive.get("contextPath") + "/camfilepreview?thumb=true&folder=" + encodeURIComponent(selectedFile.path) + "&name=" + encodeURIComponent(selectedFile.name);					
				}
				navRactive.set("browseData", browseData);
			},
			downloadSelectedFiles: function(event) {
				$(".fileSelectionCheckbox:checked").each(function(idx, el) {
					$(el).parent().find(".copyToPcBtn").click();
					$(el).click();
				});			
			},
			deleteSelectedFiles: function(event) { 
				var browseData = navRactive.get("browseData");
				var selectedFiles = navRactive.get("selectedFiles");
				if(!selectedFiles) {
					selectedFiles = [];
				}
				var filesToDelete = [];
				for(var i in selectedFiles) {
					var selectedFileIndex = selectedFiles[i];
					filesToDelete.push(browseData.filesList[selectedFileIndex]);
				}
				$("#browseContent .fileSelectionCheckbox").prop("checked", false);
				
				for(var i in filesToDelete) {
					var fileToDelete = filesToDelete[i];
					var delFunc = function(fileToDelete) {
						$.ajax({
							cache: false,
							url: '$!{request.contextPath}/deletefile?name=' + encodeURIComponent(fileToDelete.name) + '&folder=' + encodeURIComponent(fileToDelete.path),
							method: 'POST'
						}).done(function() {
							var browseDataMod = navRactive.get("browseData");
							var idx = -1;
							for(var k in browseDataMod.filesList) {
								if(browseDataMod.filesList[k].name == fileToDelete.name && browseDataMod.filesList[k].path == fileToDelete.path) {
									idx = k;
									break;
								}  
							}
							if(idx>=0) {
								browseDataMod.filesList.splice(idx, 1);
							}
							navRactive.set("browseData", browseDataMod);
						}).fail(function(jqXHR, textStatus) {
							alert("Error deleting file: "+textStatus);
						});
					};
					delFunc(fileToDelete);
				}
			},
			copyFile: function(event, path, name) {
				var copyButton = $(event.node);
				copyButton.hide();
				var loadingIndicator = $(event.node).parent().find(".copyLoadingIndicator");
				loadingIndicator.show();
				$.ajax({
					cache: false,
					url: '$!{request.contextPath}/downloadcamfile?name=' + encodeURIComponent(name) + '&folder=' + encodeURIComponent(path),
					method: 'POST'
				}).done(function() {
					copyButton.show();
					loadingIndicator.hide();
				}).fail(function(jqXHR, textStatus) {
					copyButton.show();
					loadingIndicator.hide();
					console.log(jqXHR);
					alert("Error copying file: "+textStatus);
				});				
			},
			deleteFile: function(event, path, name) {
				if(confirm("Delete file "+path.replace(/\/$/g,'')+"/"+name+"?")) {
					var deleteLink = $(event.node);
					var loadingIndicator = $(event.node).parent().find(".deleteLoadingIndicator");
					deleteLink.hide();
					loadingIndicator.show();
					$.ajax({
						cache: false,
						url: '$!{request.contextPath}/deletefile?name=' + encodeURIComponent(name) + '&folder=' + encodeURIComponent(path),
						method: 'POST'
					}).done(function() {
						deleteLink.show();
						loadingIndicator.hide();
						navRactive.fire('browseFolder', event, path.replace(/\/$/g,''));
					}).fail(function(jqXHR, textStatus) {
						deleteLink.show();
						loadingIndicator.hide();
						console.log(jqXHR);
						alert("Error deleting file: "+textStatus);
					});
				}		
			}
		});

		getJson("$!{request.contextPath}/cameraConfig.json?reRead=true", function(config) {
			var scriptingRactive = new Ractive({
				el: '#section_scripts',
				template: '#tplScriptingSection',
				data: {contextPath:"$!{request.contextPath}",
					scriptFiles:[], 
					scriptStepTypes:[
						{key:'CAPTURE', name:'Capture'},
						{key:'DELAY', name:'Wait'},
						{key:'CAMEVENT_WAIT', name:'Wait cam'},
						{key:'CAMPROP_SET', name:'Set prop'}, 
						{key:'VAR_SET', name:'Set var'},
						{key:'EXEC_SCRIPT', name:'JEXLscript'},
						{key:'STOP', name:'Stop'},
						{key:'DOWNLOAD_TO_PC', name:'Dld2PC'},
						{key:'DELETE', name:'Delete'}
					],
					cameraEventTypes:[
						{type:'', name:'Any'},
						{type:'4', name:'Capture done'},
						{type:'2', name:'File added'},
						{type:'3', name:'Folder added'},
						{type:'1', name:'Timeout'},
						{type:'0', name:'Unknown'}
					],
					config: config
				}
			});

			var saveScript = function(ractive, nameOverride, successCallback, errorCallback) {
				var scriptName = nameOverride? nameOverride : ractive.get("scriptName");
				var scriptSteps = ractive.get("scriptSteps");
	
				var loadingIndicator = $("#scriptEditor .loadingIndicator");
				var errorIndicator = $("#scriptEditor .errorIndicator");
	
				loadingIndicator.show();
				errorIndicator.hide();
				$("#btnScriptSave").prop("disabled", true);
				$.ajax({
					url: "$!{request.contextPath}/scripts/put?name=" + encodeURIComponent(scriptName), 
					method: 'POST', 
					contentType: 'application/json',
					data: JSON.stringify(scriptSteps),
					dataType: 'json'
				}).done(function(data) {
					loadingIndicator.hide();
					errorIndicator.hide();
					ractive.set("isDirty", false);
					$("#btnScriptSave").prop("disabled", false);
					if(successCallback) {
						successCallback();
					}
				}).fail(function(jqXHR, textStatus) {
					console.log("Error saving script: " + textStatus);
					loadingIndicator.hide();
					errorIndicator.show();
					$("#btnScriptSave").prop("disabled", false);
					if(errorCallback) {
						errorCallback();
					}					
				});
			};
	
			var checkSaveRequired = function(ractive, successCallback) {
				var dirty = ractive.get("isDirty");
				
				if(dirty) {
					var scriptName = ractive.get("scriptName");
					if(confirm("Save current changes to "+scriptName+"?")) {
						saveScript(ractive, null, successCallback);
					} else {
						successCallback();
					}
				} else {
					successCallback();
				}
			}
			
			var loadScriptsStatus = function(type) {
				$("#scriptStatusLoadingIndicator").show();
				$("#scriptStatusErrorIndicator").hide();
				getJson("$!{request.contextPath}/scripts/exec/"+type, function(data) {
					$("#scriptStatusLoadingIndicator").hide();
					$("#scriptStatusErrorIndicator").hide();
					scriptingRactive.set("scriptExecutionStatusInfo", data);
				}, function(jqXHR, textStatus) {
					$("#scriptStatusLoadingIndicator").hide();
					$("#scriptStatusErrorIndicator").show();
					console.log("Error loading script status: "+textStatus);
				});
			};
			
			function startTraceWebSocket(handler, ractive){
			    var webSocket = new WebSocket("ws://"+window.location.hostname+":"+window.location.port+"$!{request.contextPath}/scriptws");
				ractive.set("traceWebSocket", webSocket);
			    webSocket.onmessage = handler;
			    webSocket.onclose = function() {
			        setTimeout(function(){
			        	if(webSocket.readyState != 1) {
			        		if(!ractive.get("traceWebSocketDontReconnect")) {
			        			webSocket.close();
				        		startTraceWebSocket(handler, ractive);
				        	}
			        	}
			        }, 1000);
			    };
			}

			
			scriptingRactive.on({
				setAfterStepDelay: function(event) {
					var afterStepDelay = prompt("Input after-step delay value in miliseconds", "1000");
					if(afterStepDelay) {
						$("#asdLoadingIndicator").show();
						$("#asdErrorIndicator").hide();
						$.ajax({
							method: 'POST',
							url: '$!{request.contextPath}/scripts/exec/afterstepdelay',
							data: {value: afterStepDelay}
						}).done(function(data) {
							$("#asdLoadingIndicator").hide();
							$("#asdErrorIndicator").hide();										
						}).fail(function(jqXHR, textStatus) {
							$("#asdLoadingIndicator").hide();
							$("#asdErrorIndicator").show();				
							console.log("Error setting script variables dumping: "+textStatus);
						});
					}
				},
				stopTracing: function(event) {
					var ws = scriptingRactive.get("traceWebSocket");
					scriptingRactive.set("traceWebSocketDontReconnect", true);
					ws.close();
					scriptingRactive.set("activeScriptStepIndex", null);
					$("#btnStartTracing").show();
					$("#btnStoptTracing").hide();				
				},
				startTracing: function(event) {
					scriptingRactive.set("traceWebSocketDontReconnect", false);
					checkSaveRequired(scriptingRactive, function() {
						getJson("$!{request.contextPath}/scripts/exec/current/steps", function(scriptSteps) {
							scriptingRactive.set("scriptSteps", scriptSteps);
							scriptingRactive.set("isDirty", false);
							$("#btnStartTracing").hide();
							$("#btnStoptTracing").show();
						
							startTraceWebSocket(function(event) {
								var eventData = JSON.parse(event.data);
								scriptingRactive.set("scriptName", eventData.___scriptName);
								scriptingRactive.set("scriptExecutionStatusInfo", eventData);
								if(eventData.___eventType == 'preStep') {
									scriptingRactive.set("activeScriptStepIndex", eventData.___currentStep);
								} else if(eventData.___eventType == 'postStep') {
									scriptingRactive.set("activeScriptStepIndex", null);
								}
							}, scriptingRactive);
						
						}, function(jqXHR, textStatus) {
							alert("Error loading currently running script steps: "+textStatus);
						});
					});
				},
				setCurrentScriptStatusAutoUpdate: function(event) {
					var interval = parseInt($("#setCurrentScriptStatusAutoUpdateIntervalInput").val());
					if(!interval>0) { // covers NaN
						interval = 1;
					}
					interval = interval * 1000;
					if(event.node.checked) {
						var loadScriptsStatusIntervalObj = setInterval(function() {
							loadScriptsStatus('current');
						}, interval);
						scriptingRactive.set('loadScriptsStatusIntervalObj', loadScriptsStatusIntervalObj);
					} else {
						var loadScriptsStatusIntervalObj = scriptingRactive.get('loadScriptsStatusIntervalObj');
						clearInterval(loadScriptsStatusIntervalObj);
					}
				},
				setScriptStopOnError: function(event, val) {
					$("#stopOnErrorLoadingIndicator").show();
					$("#stopOnErrorErrorIndicator").hide();				
					$.ajax({
						method: 'POST',
						url: '$!{request.contextPath}/scripts/exec/stoponerror',
						data: {enable: val}
					}).done(function(data) {
						$("#stopOnErrorLoadingIndicator").hide();
						$("#stopOnErrorErrorIndicator").hide();										
					}).fail(function(jqXHR, textStatus) {
						$("#stopOnErrorLoadingIndicator").hide();
						$("#stopOnErrorErrorIndicator").show();				
						console.log("Error setting script variables dumping: "+textStatus);
					});
				},
				setScriptVarDump: function(event, val) {
					$("#varDumpLoadingIndicator").show();
					$("#varDumpErrorIndicator").hide();				
					$.ajax({
						method: 'POST',
						url: '$!{request.contextPath}/scripts/exec/dumpvars',
						data: {enable: val}
					}).done(function(data) {
						$("#varDumpLoadingIndicator").hide();
						$("#varDumpErrorIndicator").hide();										
					}).fail(function(jqXHR, textStatus) {
						$("#varDumpLoadingIndicator").hide();
						$("#varDumpErrorIndicator").show();				
						console.log("Error setting script variables dumping: "+textStatus);
					});
				},
				loadScriptStatus: function(event, type) { loadScriptsStatus(type) },
				toggleScriptVarsHint: function() {
					$("#scriptVarsHint").toggle();
				},
				stopScript: function() {
					$("#btnScriptStop").prop("disabled", true);
					$.ajax({
						url:"$!{request.contextPath}/scripts/exec/stop",
						method:"POST"
					}).done(function(data) {
						$("#btnScriptStop").prop("disabled", false);
						$("#runStopStatusText").text("");
					}).fail(function(jqXHR, textStatus) {
						$("#runStopStatusText").text("No scripts are running");
						$("#btnScriptStop").prop("disabled", false);
					});
				},
				runScript: function() {
					$("#btnScriptRun").prop("disabled", true);
					$.ajax({
						url:"$!{request.contextPath}/scripts/exec/start?name=" + encodeURIComponent(scriptingRactive.get("scriptName")),
						method:"POST"
					}).done(function(data) {
						$("#btnScriptRun").prop("disabled", false);
						$("#runStopStatusText").text("");
					}).fail(function(jqXHR, textStatus) {
						$("#runStopStatusText").text(jqXHR.responseJSON);
						$("#btnScriptRun").prop("disabled", false);
					});
				},
				deleteScriptStep: function(event, index) {
					if(confirm("Delete script step?")) {
						var scriptSteps = scriptingRactive.get("scriptSteps");
						scriptSteps.splice(index, 1);
						scriptingRactive.set("scriptSteps", scriptSteps);
						scriptingRactive.set("isDirty", true);
					}
				},
				swapScriptSteps: function(event, idxA, idxB) {
					var scriptSteps = scriptingRactive.get("scriptSteps");
					if(idxA>-1 && idxB>-1 && idxA<scriptSteps.length && idxB<scriptSteps.length) {
						var stepA = scriptSteps[idxA];
						scriptSteps[idxA] = scriptSteps[idxB];
						scriptSteps[idxB] = stepA;
						scriptingRactive.set("scriptSteps", scriptSteps);
						scriptingRactive.set("isDirty", true);
					}
				},
				addScriptStep: function() {
					var scriptSteps = scriptingRactive.get("scriptSteps");
					scriptSteps.push({type:'DELAY', expression:'1000', key:'', condition:''});
					scriptingRactive.set("scriptSteps", scriptSteps);
					scriptingRactive.set("isDirty", true);
				},
				createNewScript: function() {
					checkSaveRequired(scriptingRactive, function() {
						var newScriptName = prompt("Input script name", "new.gp2srv_script");
						if(newScriptName) {
							scriptingRactive.set("scriptSteps", [{type:'DELAY', expression:'1000', key:'', condition:''}]);
							scriptingRactive.set("scriptName", newScriptName);
							scriptingRactive.set("isDirty", true);
						}
					});
				},
				saveScript: function() {
					saveScript(scriptingRactive);
				},
				saveScriptAs: function() {
					var newScriptName = prompt("Input script name", "new.gp2srv_script");
					if(newScriptName) {
						saveScript(scriptingRactive, newScriptName);
					}
				},
				closeExportImportForm: function() {
					$("#exportImportForm").hide();
					$("#exportImportFormContents").val("");
				},
				scriptExport: function() {
					var contents = JSON.stringify(scriptingRactive.get("scriptSteps"), null, "  ");
					$("#exportImportFormContents").val(contents);
					$("#exportImportForm").show();
				},
				scriptImport: function() {
					$("#exportImportFormContents").val("");
					$("#exportImportForm").show();					
				},
				scriptRead: function() {
					scriptingRactive.set("scriptSteps", JSON.parse($("#exportImportFormContents").val()));
				},
				scriptStepPropertyChanged: function(event, field, stepIndex, newValue) {
					scriptingRactive.set("isDirty", true);
					var steps = scriptingRactive.get("scriptSteps");
					var step = steps[stepIndex];
					step[field] = newValue;
					if(field == 'type') {
						if(newValue == 'CAMEVENT_WAIT') {
							step['key'] = '';
						} else if(newValue == 'CAMPROP_SET') {
							step['key'] = Object.keys(scriptingRactive.get('config'))[0];
						}
					}
					scriptingRactive.set("scriptSteps", steps);
				},
				loadScriptsList: function() {
					getJson("$!{request.contextPath}/scripts/list", function(scriptsList) {
						scriptingRactive.set("scriptFiles", scriptsList);
					}, function(textStatus) {
						alert('Error loading scripts list: '+textStatus);
					});				
				},
				loadScript: function(event, scriptName) {
					checkSaveRequired(scriptingRactive, function() {
						var loadingIndicator = $("#scriptEditor .loadingIndicator");
						var errorIndicator = $("#scriptEditor .errorIndicator");
						loadingIndicator.show();
						errorIndicator.hide();						
						getJson("$!{request.contextPath}/scripts/get?name=" + encodeURIComponent(scriptName), function(scriptSteps) {
							loadingIndicator.hide();
							errorIndicator.hide();
							
							scriptingRactive.set("scriptSteps", scriptSteps);
							scriptingRactive.set("scriptName", scriptName);
							scriptingRactive.set("isDirty", false);
							scriptingRactive.set("activeScriptStepIndex", null);
							$("#scriptVarsHint").hide();
						}, function(textStatus){
							console.log("Error loading script: " + textStatus);
							loadingIndicator.hide();
							errorIndicator.show();
						});
					});
				},
				deleteScript: function(event, scriptName) {
					var container = $(event.node);
					var loadingIndicator = container.parent().find(".deleteLoadingIndicator");
					var errorIndicator = container.parent().find(".deleteErrorIndicator");
					loadingIndicator.show();
					errorIndicator.hide();
					$.ajax({
						url: "$!{request.contextPath}/scripts/delete", 
						method: "POST", 
						data: {name:scriptName}
					}).done(function(data) {
						loadingIndicator.hide();
						if(data) {
							errorIndicator.hide();
							var scriptFiles = scriptingRactive.get("scriptFiles");
							for(var idx in scriptFiles) {
								if(scriptFiles[idx] == scriptName) {
									scriptFiles.splice(idx, 1);
									scriptingRactive.set("scriptFiles", scriptFiles);
									break;
								}
							}
						} else {
							errorIndicator.show();	
						}
					}).fail(function(jqXHR, textStatus) {
						loadingIndicator.hide();
						errorIndicator.show();
					});
				}
			});
		
		}, function(textStatus) {
			alert("Error loading camera config: "+textStatus);
		});				
	}
	
	function getJson(url, successCallback, errorCallback) {
		$.ajax({
			cache: false,
			url: url
		}).done(function(data) {
			successCallback(data);
		}).fail(function(jqXHR, textStatus) {
			console.error("Error obtaining JSON from "+url+". " + textStatus);
			if(errorCallback) {
				errorCallback(textStatus);
			}
		});	
	}	
	
	$(document).ready(initUi);
</script>
<script type="text/ractive" id="tplConfigSetting">
	#include("camera/configsetting.ractive")
</script>
<script type="text/ractive" id="tplCameraConfigSettings">
	#include("camera/configsettingspage.ractive")
</script>
<script type="text/ractive" id="tplBrowseSection">
	#include("camera/browsesection.ractive")
</script>
<script type="text/ractive" id="tplScriptingSection">
	#include("camera/scriptingsection.ractive")
</script>
<div class="fullWidth">
	<div class="pageHead">GPhoto2Server</div>
	<div class="pageSubHead">
		<div class="navigationContainer">
			#foreach($navopt in ["camera", "files", "scripts"])
				#if($foreach.count>1) | #end
				<span><a href="#$!navopt" onclick="javascript:nav('$!navopt');return false">$!navopt</a></span>
			#end
			| <span><a href="/camdisconnect">x</a></span>
		</div>
	</div>
	<div class="sitesection" id="section_camera">
	</div>
	<div class="sitesection pageContent scroll" id="section_files">
	</div>
	<div class="sitesection pageContent scroll" id="section_scripts">
	</div>
</div>
#parse("camera/foot.vm")
